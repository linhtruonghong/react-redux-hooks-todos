{"version":3,"sources":["context.js","reducer.js","components/TodoList.js","components/TodoForm.js","serviceWorker.js","index.js"],"names":["TodosContext","React","createContext","todos","id","text","complete","currentTodo","reducer","state","action","type","toggledTodo","map","t","payload","filterTodo","filter","isRemovedTodo","findIndex","newTodo","uuidv4","addedTodos","updatedTodo","updatedTodoIndex","updatedTodos","slice","TodoList","useContext","dispatch","title","length","className","todo","key","onDoubleClick","onClick","src","alt","TodoForm","useState","setTodo","useEffect","onSubmit","event","preventDefault","value","onChange","target","Boolean","window","location","hostname","match","ReactDOM","render","initialState","useReducer","todosReducer","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6613a289.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TodosContext = React.createContext({\r\n    todos: [\r\n        {\r\n            id: 1, text: \"Eat breakfirst\", complete: false\r\n        },\r\n        {\r\n            id: 2, text: \"Eat Laundry\", complete: false\r\n        },\r\n        {\r\n            id: 3, text: \"Finish project\", complete: true\r\n        }\r\n    ],\r\n    currentTodo: {}\r\n});\r\n\r\nexport default TodosContext;","import uuidv4 from 'uuid/v4';\r\n\r\nexport default function reducer(state, action) {\r\n    switch (action.type) {\r\n        case \"TOGGLE_TODO\":\r\n            const toggledTodo = state.todos.map(t => t.id === action.payload.id\r\n                ? {...action.payload, complete: !action.payload.complete}\r\n                : t\r\n            );\r\n            return {\r\n                ...state,\r\n                todos: toggledTodo\r\n            };\r\n        case \"REMOVE_TODO\":\r\n            const filterTodo = state.todos.filter(t => t.id !== action.payload.id);\r\n            const isRemovedTodo = state.currentTodo.id === action.payload.id\r\n                ? {}\r\n                : state.currentTodo;\r\n\r\n            return {\r\n                ...state,\r\n                currentTodo: isRemovedTodo,\r\n                todos: filterTodo\r\n            };\r\n        case \"ADD_TODO\":\r\n            if (!action.payload) {\r\n                return state;\r\n            }\r\n            if (state.todos.findIndex(t => t.text === action.payload)) {\r\n                return state;\r\n            }\r\n            const newTodo = {\r\n                id: uuidv4(),\r\n                text: action.payload,\r\n                complete: false\r\n            };\r\n            const addedTodos = [...state.todos, newTodo];\r\n\r\n            return {\r\n                ...state,\r\n                todos: addedTodos\r\n            };\r\n        case \"SET_CURRENT_TODO\":\r\n            return {\r\n                ...state,\r\n                currentTodo: action.payload\r\n            };\r\n        case \"UPDATE_TODO\":\r\n            if (!action.payload) {\r\n                return state;\r\n            }\r\n            if (state.todos.findIndex(t => t.text === action.payload)) {\r\n                return state;\r\n            }\r\n            \r\n            const updatedTodo = {\r\n                ...state.currentTodo, text: action.payload\r\n            };\r\n            const updatedTodoIndex = state.todos.findIndex(\r\n                t => t.id === state.currentTodo.id\r\n            );\r\n            const updatedTodos = [\r\n                ...state.todos.slice(0, updatedTodoIndex),\r\n                updatedTodo,\r\n                ...state.todos.slice(updatedTodoIndex + 1)\r\n            ];\r\n\r\n            return {\r\n                ...state,\r\n                currentTodo: {},\r\n                todos: updatedTodos\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import React, {useContext} from \"react\";\r\nimport TodosContext from \"../context\";\r\n\r\nexport default function TodoList() {\r\n    const {state, dispatch} = useContext(TodosContext);\r\n    const title = state.todos.length > 0 ?\r\n        `${state.todos.length} Todos` : \"Nothing To Do\";\r\n\r\n    return (\r\n        <div className=\"container mx-auto max-w-md text-center font-mono\">\r\n            <h1 className=\"text-bold\">{title}</h1>\r\n            <ul className=\"list-reset text-black p-0\">\r\n                {state.todos.map(todo => (\r\n                    <li key={todo.id}\r\n                        className=\"flex items-center bg-orange-dark border-black border-dashed border-2 my-2 py-4\">\r\n                        <span\r\n                            onDoubleClick={() => dispatch({type: \"TOGGLE_TODO\", payload: todo})}\r\n                            className={`flex-1 ml-12 cursor-pointer ${todo.complete && \"line-through text-grey\"}`}>{todo.text}</span>\r\n                        <button\r\n                            onClick={() => dispatch({type: \"SET_CURRENT_TODO\", payload: todo})}\r\n                        >\r\n                            <img src=\"https://icon.now.sh/edit/0050c5\" alt=\"Edit Icon\" className=\"h-6\"/>\r\n                        </button>\r\n                        <button\r\n                            onClick={() => dispatch({type: \"REMOVE_TODO\", payload: todo})}\r\n                        >\r\n                            <img src=\"https://icon.now.sh/delete/8b0000\" alt=\"Delete Icon\" className=\"h-6\"/>\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n\r\n}","import React, {useState, useContext, useEffect} from \"react\";\r\nimport TodosContext from \"../context\";\r\n\r\nexport default function TodoForm() {\r\n    const [todo, setTodo] = useState(\"\");\r\n    const {state: {currentTodo = {}}, dispatch} = useContext(TodosContext);\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        if (currentTodo.text) {\r\n            dispatch({type: \"UPDATE_TODO\", payload: todo})\r\n        } else {\r\n            if (todo !== '') {\r\n                dispatch({type: \"ADD_TODO\", payload: todo});\r\n            }\r\n        }\r\n        setTodo(\"\");\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (currentTodo.text) {\r\n            setTodo(currentTodo.text);\r\n        } else {\r\n            setTodo(\"\");\r\n        }\r\n    }, [currentTodo.id, currentTodo.text]);\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"flex justify-center p-5\">\r\n            <input\r\n                value={todo}\r\n                type=\"text\"\r\n                className=\"border-black border-solid border-2\"\r\n                onChange={event => setTodo(event.target.value)}\r\n            />\r\n        </form>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {useContext, useReducer} from 'react';\nimport ReactDOM from 'react-dom';\nimport TodosContext from \"./context\";\nimport todosReducer from './reducer';\n\nimport TodoList from \"./components/TodoList\";\nimport TodoForm from \"./components/TodoForm\";\n\nimport * as serviceWorker from './serviceWorker';\n\nconst App = () => {\n    const initialState = useContext(TodosContext);\n    const [state, dispatch] = useReducer(todosReducer, initialState);\n\n    return (\n        <TodosContext.Provider value={{state, dispatch}}>\n            <TodoForm/>\n            <TodoList/>\n        </TodosContext.Provider>\n    )\n};\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}